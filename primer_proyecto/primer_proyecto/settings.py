"""
Django settings for primer_proyecto project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from google.oauth2 import service_account
from pathlib import Path
import base64
from dotenv import load_dotenv
from django.urls import reverse_lazy 
import pymysql
from storages.backends.gcloud import GoogleCloudStorage
import json
from django.middleware.security import SecurityMiddleware
from google.auth import default

CSRF_TRUSTED_ORIGINS = [
    "https://code-crafters-staging-531223854869.us-central1.run.app"
]

SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True


GOOGLE_APPLICATION_CREDENTIALS = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")

GOOGLE_APPLICATION_CREDENTIALS_JSON = os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON")

if GOOGLE_APPLICATION_CREDENTIALS_JSON:
    credentials_info = json.loads(
        base64.b64decode(GOOGLE_APPLICATION_CREDENTIALS_JSON).decode("utf-8")
    )
    GS_CREDENTIALS = service_account.Credentials.from_service_account_info(credentials_info)
else:
    GS_CREDENTIALS = None

class GoogleCloudStaticStorage(GoogleCloudStorage):
    location = "static"

class GoogleCloudMediaStorage(GoogleCloudStorage):
    location = "media"

pymysql.install_as_MySQLdb()


load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

LOGIN_URL = reverse_lazy('apps.blog_auth:iniciar_sesion')
LOGIN_REDIRECT_URL = reverse_lazy('index')
LOGOUT_REDIRECT_URL = reverse_lazy('index')

PORT = os.environ.get('PORT', 8080)
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'storages',

    #apps personalizadas
    'apps.post',
    'apps.blog_auth',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', #servir estaticos cuando debug esta en false
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

ROOT_URLCONF = 'primer_proyecto.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'primer_proyecto.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

NAME_DB = os.getenv("NAME_DB")
USER_DB = os.getenv("USER_MYSQL")
PASSWORD_DB =  os.getenv("PASSWORD_MYSQL")

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': '/cloudsql/code-crafters-project-2025:us-central1:mi-db-instance2',
        #'HOST': 'localhost',
        'USER': USER_DB,
        'PASSWORD': PASSWORD_DB,
        'NAME': NAME_DB,
        'PORT': '3306',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'es-ar'

TIME_ZONE = 'America/Argentina/Buenos_Aires'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/



# Configuración de Cloud Storage
GS_BUCKET_NAME = "tu-bucket-staging"


STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")


# Configurar Google Cloud Storage





STATIC_URL = f"https://storage.googleapis.com/{GS_BUCKET_NAME}/static/"

MEDIA_URL = f"https://storage.googleapis.com/{GS_BUCKET_NAME}/media/"



# Configuración de archivos estáticos en Google Cloud Storage

DEFAULT_FILE_STORAGE = "custom_storage.GoogleCloudMediaStorage" # Para archivos multimedia
STATICFILES_STORAGE = "custom_storage.GoogleCloudStaticStorage" # Para archivos estáticos




STATICFILES_DIRS = []  # Evita conflictos con archivos locales
STORAGES = {
    "default": {
        "BACKEND": "custom_storage.GoogleCloudMediaStorage",
    },
    "staticfiles": {
        "BACKEND": "custom_storage.GoogleCloudStaticStorage",
    },
}

MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Configurar Google Cloud Storage
GS_PROJECT_ID = "code-crafters-project-2025"
GS_DEFAULT_ACL = "publicRead"

  
 

# Rutas de archivos estáticos y multimedia

# Directorios locales para archivos estáticos